<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8" />
  <title>ƒê·∫∑t Xe - T√≠nh Gi√° Mapbox</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link href="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css" />
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #121212;
      color: #f0f0f0;
      margin: 0;
      padding: 10px;
    }
    #map {
      width: 100%;
      height: 250px;
      margin: 10px 0;
      border-radius: 10px;
    }
    .form-group, select, label, button {
      width: 100%;
      margin-bottom: 10px;
    }
    .geocoder input {
      width: 100%;
      padding: 12px 12px 12px 36px;
      background: #1e1e1e;
      border: none;
      border-radius: 6px;
      color: #f0f0f0;
      box-sizing: border-box;
    }
    .geocoder input:focus {
      background-color: #2c2c2c;
      outline: 2px solid #00ff99;
    }
    .geocoder .mapboxgl-ctrl-geocoder--icon-search {
      left: 10px;
      top: 12px;
      fill: #ccc;
    }
    .geocoder .mapboxgl-ctrl-geocoder--input {
      padding-left: 36px;
    }
    select, button {
      padding: 10px;
      border-radius: 6px;
      border: none;
      background: #1e1e1e;
      color: #f0f0f0;
    }
    button {
      background: #007aff;
      color: white;
      font-weight: bold;
    }
    #info {
      font-weight: bold;
      color: #00ff99;
      text-align: center;
      margin: 10px 0;
    }
    @media (min-width: 600px) {
      #map {
        height: 300px;
      }
    }
  </style>
</head>
<body>
  <h2 style="text-align:center">üöñ ƒê·∫∑t Xe - T√≠nh C∆∞·ªõc Mapbox</h2>

  <div class="form-group">
    <div id="geocoder-origin" class="geocoder"></div>
  </div>

  <div class="form-group">
    <div id="geocoder-destination" class="geocoder"></div>
  </div>

  <button onclick="swapLocations()">üîÅ ƒê·ªïi chi·ªÅu</button>

  <select id="carType">
    <option value="4">üöó Xe 4 ch·ªó</option>
    <option value="7">üöô Xe 7 ch·ªó</option>
    <option value="16">üöå Xe 16 ch·ªó</option>
  </select>

  <label><input type="checkbox" id="twoWay" /> üöï ƒêi 2 chi·ªÅu</label>
  <label><input type="checkbox" id="night" /> üåô Ph·ª• ph√≠ ban ƒë√™m</label>

  <div id="info">
    <p id="distance"></p>
    <p id="price"></p>
  </div>

  <div id="map"></div>

  <script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
  <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js"></script>
  <script>
    mapboxgl.accessToken = 'pk.eyJ1IjoidGF4aTI0aC1vbmxpbmUiLCJhIjoiY21kcm5xeWk2MGw1NDJxb25zY3V4eHd4MCJ9.K4wVs6Xwelw6Ic6mXK1FPg';

    const map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/mapbox/dark-v10',
      center: [105.854444, 21.028511],
      zoom: 12
    });

    const geocoderOrigin = new MapboxGeocoder({
      accessToken: mapboxgl.accessToken,
      placeholder: 'ƒêi·ªÉm ƒëi (ƒë·ªãa danh, ƒë√¨nh ch√πa...)',
      mapboxgl: mapboxgl,
      marker: false,
      countries: 'vn'
    });

    const geocoderDestination = new MapboxGeocoder({
      accessToken: mapboxgl.accessToken,
      placeholder: 'ƒêi·ªÉm ƒë·∫øn (ƒë·ªãa danh, ƒë·ªãa l√Ω...)',
      mapboxgl: mapboxgl,
      marker: false,
      countries: 'vn'
    });

    document.getElementById('geocoder-origin').appendChild(geocoderOrigin.onAdd(map));
    document.getElementById('geocoder-destination').appendChild(geocoderDestination.onAdd(map));

    let originCoords = null;
    let destinationCoords = null;

    geocoderOrigin.on('result', function (e) {
      originCoords = e.result.geometry.coordinates;
      if (originCoords && destinationCoords) calculateDistance();
    });

    geocoderDestination.on('result', function (e) {
      destinationCoords = e.result.geometry.coordinates;
      if (originCoords && destinationCoords) calculateDistance();
    });

    document.getElementById('carType').addEventListener('change', calculateDistance);
    document.getElementById('night').addEventListener('change', calculateDistance);
    document.getElementById('twoWay').addEventListener('change', calculateDistance);

    function swapLocations() {
      [originCoords, destinationCoords] = [destinationCoords, originCoords];
      if (originCoords && destinationCoords) calculateDistance();
    }

    function calculateDistance() {
      if (!originCoords || !destinationCoords) return;

      const url = `https://api.mapbox.com/directions/v5/mapbox/driving/${originCoords[0]},${originCoords[1]};${destinationCoords[0]},${destinationCoords[1]}?geometries=geojson&access_token=${mapboxgl.accessToken}`;

      fetch(url)
        .then(res => res.json())
        .then(data => {
          const route = data.routes[0];
          const distanceKm = route.distance / 1000;
          const price = calculatePrice(distanceKm);

          document.getElementById('distance').innerText = `üìè Kho·∫£ng c√°ch: ${distanceKm.toFixed(2)} km`;
          document.getElementById('price').innerText = `üí∞ Gi√° c∆∞·ªõc: ${price.toLocaleString()} VND`;

          map.getSource('route')?.setData(route.geometry) || map.addSource('route', {
            type: 'geojson',
            data: route.geometry
          });

          if (!map.getLayer('route')) {
            map.addLayer({
              id: 'route',
              type: 'line',
              source: 'route',
              paint: {
                'line-color': '#00ff99',
                'line-width': 4
              }
            });
          }

          map.fitBounds([originCoords, destinationCoords], { padding: 50 });
        });
    }

    function calculatePrice(distanceKm) {
      const carType = document.getElementById('carType').value;
      const isNight = document.getElementById('night').checked;
      const isTwoWay = document.getElementById('twoWay').checked;

      const pricing = {
        4: { open: 10000, firstKm: 15000, nextKm: 11000 },
        7: { open: 12000, firstKm: 17000, nextKm: 13000 },
        16: { open: 15000, firstKm: 20000, nextKm: 15000 }
      };

      const p = pricing[carType];
      let base = distanceKm <= 1 ? p.open + p.firstKm : p.open + p.firstKm + ((distanceKm - 1) * p.nextKm);
      if (isNight) base *= 1.2;
      if (isTwoWay) base *= 2;

      return Math.round(base);
    }
  </script>
</body>
</html>
