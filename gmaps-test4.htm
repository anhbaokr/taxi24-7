<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8" />
  <title>ƒê·∫∑t Xe</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link href="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css" rel="stylesheet" />
  <link href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css" rel="stylesheet" />
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #2c3e50;
      color: #fff;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
    }

    form {
      width: 100%;
      max-width: 400px;
      height: auto;
      padding: 20px;
      box-sizing: border-box;
      background-color: #34495e;
      border-radius: 10px;
      box-shadow: 0 0 10px #00000088;
      margin: 20px;
    }

    h2 {
      text-align: center;
      margin-bottom: 16px;
    }

    input, select, button {
      width: 100%;
      padding: 10px;
      margin-bottom: 10px;
      border: none;
      border-radius: 6px;
      font-size: 14px;
      background-color: #ecf0f1;
      color: #2c3e50;
      box-sizing: border-box;
    }

    input:hover, select:hover {
      outline: 2px solid #1abc9c;
    }

    button {
      background-color: #1abc9c;
      color: white;
      font-weight: bold;
      transition: background-color 0.3s ease;
    }

    button:hover {
      background-color: #16a085;
    }

    .checkbox-group {
      display: flex;
      justify-content: space-between;
      margin-bottom: 10px;
    }

    .checkbox-group label {
      flex: 1;
      margin-right: 10px;
      background-color: #ecf0f1;
      color: #2c3e50;
      padding: 8px;
      border-radius: 6px;
      display: flex;
      align-items: center;
      gap: 6px;
      font-size: 14px;
      box-sizing: border-box;
    }

    .checkbox-group label:last-child {
      margin-right: 0;
    }

    .checkbox-group input[type="checkbox"] {
      accent-color: #1abc9c;
    }

    #map {
      width: 100%;
      height: 180px;
      border-radius: 8px;
      margin-top: 10px;
    }

    #info {
      text-align: center;
      margin-bottom: 10px;
      font-weight: bold;
    }

    #loading {
      display: none;
      text-align: center;
      font-weight: bold;
      padding: 10px;
      color: #1abc9c;
    }

    .datetime-picker {
      margin-bottom: 10px;
    }
  </style>
</head>
<body>
  <form id="bookingForm">
    <h2>üöñ ƒê·∫∑t Xe</h2>
    <input type="text" id="name" placeholder="H·ªç v√† t√™n" required />
    <input type="tel" id="phone" placeholder="S·ªë ƒëi·ªán tho·∫°i" required />
    <input type="datetime-local" id="datetime" class="datetime-picker" required />

    <div id="geocoder-origin"></div>
    <div id="geocoder-destination"></div>
    <button type="button" onclick="swapLocations()">üîÅ ƒê·ªïi chi·ªÅu</button>

    <select id="carType">
      <option value="4">üöó Xe 4 ch·ªó</option>
      <option value="7">üöô Xe 7 ch·ªó</option>
      <option value="16">üöå Xe 16 ch·ªó</option>
    </select>

    <div class="checkbox-group">
      <label><input type="checkbox" id="twoWay" /> 2 chi·ªÅu</label>
      <label><input type="checkbox" id="night" /> Ban ƒë√™m</label>
    </div>

    <div id="info">
      <div id="distance">üìè</div>
      <div id="price">üí∞</div>
    </div>

    <div id="loading">‚è≥ ƒêang g·ª≠i th√¥ng tin ƒë·∫∑t xe...</div>
    <button type="submit">üì© ƒê·∫∑t xe</button>

    <div id="map"></div>
  </form>

  <script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
  <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js"></script>
  <script>
    mapboxgl.accessToken = 'pk.eyJ1IjoidGF4aTI0aC1vbmxpbmUiLCJhIjoiY21kcm5xeWk2MGw1NDJxb25zY3V4eHd4MCJ9.K4wVs6Xwelw6Ic6mXK1FPg';

    const map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/mapbox/dark-v10',
      center: [105.854444, 21.028511],
      zoom: 12
    });

    const geocoderOrigin = new MapboxGeocoder({
      accessToken: mapboxgl.accessToken,
      placeholder: 'ƒêi·ªÉm ƒëi',
      mapboxgl: mapboxgl,
      marker: false,
      countries: 'vn'
    });

    const geocoderDestination = new MapboxGeocoder({
      accessToken: mapboxgl.accessToken,
      placeholder: 'ƒêi·ªÉm ƒë·∫øn',
      mapboxgl: mapboxgl,
      marker: false,
      countries: 'vn'
    });

    document.getElementById('geocoder-origin').appendChild(geocoderOrigin.onAdd(map));
    document.getElementById('geocoder-destination').appendChild(geocoderDestination.onAdd(map));

    let originCoords = null;
    let destinationCoords = null;
    let originText = "";
    let destinationText = "";
    let originMarker = null;
    let destinationMarker = null;

    geocoderOrigin.on('result', function (e) {
      originCoords = e.result.geometry.coordinates;
      originText = e.result.place_name;
      updateMarkers();
      calculateRoute();
    });

    geocoderDestination.on('result', function (e) {
      destinationCoords = e.result.geometry.coordinates;
      destinationText = e.result.place_name;
      updateMarkers();
      calculateRoute();
    });

    function swapLocations() {
      [originCoords, destinationCoords] = [destinationCoords, originCoords];
      [originText, destinationText] = [destinationText, originText];
      updateMarkers();
      calculateRoute();
    }

    function updateMarkers() {
      if (originCoords) {
        if (originMarker) originMarker.remove();
        originMarker = new mapboxgl.Marker({ color: 'green' }).setLngLat(originCoords).addTo(map);
      }
      if (destinationCoords) {
        if (destinationMarker) destinationMarker.remove();
        destinationMarker = new mapboxgl.Marker({ color: 'red' }).setLngLat(destinationCoords).addTo(map);
      }
    }

    document.getElementById('carType').addEventListener('change', calculateRoute);
    document.getElementById('night').addEventListener('change', calculateRoute);
    document.getElementById('twoWay').addEventListener('change', calculateRoute);

    function calculateRoute() {
      if (!originCoords || !destinationCoords) return;
      const url = `https://api.mapbox.com/directions/v5/mapbox/driving/${originCoords[0]},${originCoords[1]};${destinationCoords[0]},${destinationCoords[1]}?geometries=geojson&access_token=${mapboxgl.accessToken}`;
      fetch(url)
        .then(res => res.json())
        .then(data => {
          const route = data.routes[0];
          const distanceKm = route.distance / 1000;
          const price = calculatePrice(distanceKm);

          document.getElementById('distance').innerText = `üìè ${distanceKm.toFixed(2)} km`;
          document.getElementById('price').innerText = `üí∞ ${price.toLocaleString()} VND`;

          map.getSource('route')?.setData(route.geometry) || map.addSource('route', { type: 'geojson', data: route.geometry });
          if (!map.getLayer('route')) {
            map.addLayer({
              id: 'route',
              type: 'line',
              source: 'route',
              paint: { 'line-color': '#1abc9c', 'line-width': 4 }
            });
          }
          map.fitBounds([originCoords, destinationCoords], { padding: 40 });
        });
    }

    function calculatePrice(km) {
      const car = document.getElementById('carType').value;
      const night = document.getElementById('night').checked;
      const twoWay = document.getElementById('twoWay').checked;

      const priceTable = {
        4: { base: 10000, first: 15000, next: 11000 },
        7: { base: 12000, first: 17000, next: 13000 },
        16: { base: 15000, first: 20000, next: 15000 }
      };
      const p = priceTable[car];
      let price = km <= 1 ? p.base + p.first : p.base + p.first + (km - 1) * p.next;
      if (night) price *= 1.2;
      if (twoWay) price *= 2;
      return Math.round(price);
    }

    document.getElementById('bookingForm').addEventListener('submit', function (e) {
      e.preventDefault();
      const loading = document.getElementById('loading');
      loading.style.display = 'block';

      const payload = {
        name: document.getElementById('name').value,
        phone: document.getElementById('phone').value,
        datetime: document.getElementById('datetime').value,
        origin: originText,
        destination: destinationText,
        carType: document.getElementById('carType').value,
        twoWay: document.getElementById('twoWay').checked ? 'C√≥' : 'Kh√¥ng',
        night: document.getElementById('night').checked ? 'C√≥' : 'Kh√¥ng',
        distance: document.getElementById('distance').innerText,
        price: document.getElementById('price').innerText
      };

      fetch("https://script.google.com/macros/s/AKfycbz7I7RyEyxf2VUxRULNXP_WBLy4xcdjLlRtFZdm9Ry4CZswidzqVI5AxhWqlKK1aYPVAg/exec", {
        method: "POST",
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: new URLSearchParams(payload)
      })
      .then(res => res.text())
      .then(() => {
        loading.innerText = "‚úÖ ƒê·∫∑t xe th√†nh c√¥ng! ch√∫ng t√¥i s·ªõm li√™n h·ªá l·∫°i...";
        setTimeout(() => {
          document.getElementById('bookingForm').reset();
          loading.style.display = 'none';
          document.getElementById('distance').innerText = "";
          document.getElementById('price').innerText = "";
        }, 2000);
      })
      .catch(() => {
        loading.innerText = "‚ùå G·ª≠i th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.";
      });
    });
  </script>
</body>
</html>
